package cn.tiger.entity.bbs;
// Generated 2016-5-25 12:13:56 by Hibernate Tools 3.5.0.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;


import cn.tiger.entity.account.AcctUser;

/**
 * Topic generated by hbm2java
 */
@Entity
@Table(name = "topic")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class Topic implements java.io.Serializable {

	private Long id;
	private Node node;
	private Long commentCount;
	private String content;
	private Date createTime;
	private Date lastCommentAt;
	private Long lastCommentUserId;
	private int status;
	private String title;
	private Date updateTime;
	private Long viewCount;
	private int isTop;
	//作者
	private AcctUser acctuser;
	//最后回复
	private AcctUser lastacctuser;
	
	//topic_ad
	private Set<TopicAd> topicAd = new HashSet<TopicAd>(0);

	private Set<Comment> comments = new HashSet(0);

	public Topic() {
	}

	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "node_id")
	public Node getNode() {
		return node;
	}

	public void setNode(Node node) {
		this.node = node;
	}

	@Column(name="comment_count")
	public Long getCommentCount() {
		return this.commentCount;
	}

	public void setCommentCount(Long commentCount) {
		this.commentCount = commentCount;
	}

	@Column(name="content",nullable = false)
	public String getContent() {
		return this.content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	@Column(name="create_time")
	public Date getCreateTime() {
		return this.createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	@Column(name="last_comment_at")
	public Date getLastCommentAt() {
		return this.lastCommentAt;
	}

	public void setLastCommentAt(Date lastCommentAt) {
		this.lastCommentAt = lastCommentAt;
	}

	@Column(name="last_comment_user_id")
	public Long getLastCommentUserId() {
		return lastCommentUserId;
	}

	public void setLastCommentUserId(Long lastCommentUserId) {
		this.lastCommentUserId = lastCommentUserId;
	}

	public int getStatus() {
		return this.status;
	}

	public void setStatus(int status) {
		this.status = status;
	}

	@Column(nullable=false)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name="update_time")
	public Date getUpdateTime() {
		return this.updateTime;
	}

	public void setUpdateTime(Date updateTime) {
		this.updateTime = updateTime;
	}

	@Column(name="view_count")
	public Long getViewCount() {
		return this.viewCount;
	}

	public void setViewCount(Long viewCount) {
		this.viewCount = viewCount;
	}

	@OneToMany(mappedBy = "topic")
	public Set<Comment> getComments() {
		return comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "user_id", nullable = false)
	public AcctUser getAcctuser() {
		return acctuser;
	}

	public void setAcctuser(AcctUser acctuser) {
		this.acctuser = acctuser;
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "last_user_id")
	public AcctUser getLastacctuser() {
		return lastacctuser;
	}

	public void setLastacctuser(AcctUser lastacctuser) {
		this.lastacctuser = lastacctuser;
	}
	
	@OneToMany(mappedBy="topic",cascade = { CascadeType.PERSIST ,CascadeType.ALL})
	public Set<TopicAd> getTopicAd() {
		return topicAd;
	}

	public void setTopicAd(Set<TopicAd> topicAd) {
		this.topicAd = topicAd;
	}

	@Column(name="istop")
	public int getIsTop() {
		return isTop;
	}

	public void setIsTop(int isTop) {
		this.isTop = isTop;
	}

	@Transient
	public String titleFormat(){
		if(title.length()<=32){
			return title;
		}else{
			return title.substring(0,32).concat("...");
		}
	}
	
	@Transient
	public String createTimeToString(){
		return createTime.toLocaleString();
	}
	
	@Transient
	public String lastCommentAtToString(){
		return lastCommentAt.toLocaleString();
	}

	@Transient
	public String updateTimeToString(){
		return updateTime.toLocaleString();
	}

}
