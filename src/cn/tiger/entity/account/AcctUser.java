package cn.tiger.entity.account;
// Generated 2016-4-29 19:14:11 by Hibernate Tools 3.5.0.Final

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.springside.modules.utils.reflection.ConvertUtils;

import com.google.common.collect.Lists;

import cn.tiger.entity.bbs.Badge;
import cn.tiger.entity.bbs.Comment;

/**
 * AcctUser generated by hbm2java
 */
@Entity
//表名与类名不相同时重新定义表名.
@Table(name = "ACCT_USER")
//默认的缓存策略.
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class AcctUser implements java.io.Serializable {

	private Long id;
	private String email;
	//javascript验证
	private String loginName;
	//如果重复在昵称后面加上#数字 比如#3366
	private String name;
	private String password;
	
	private String avatar;
	private Long login_count;
	private Date create_time;
	
	private Date outDate;
	private String validataCode;
	
	private Long experience;
	private int user_level;
	
	
	private Set<Comment> comments = new HashSet<Comment>(0);
	
	private Set<AcctUserInfo> acctUserInfo = new HashSet<AcctUserInfo>(0);
	
	private Set<Badge> badges = new HashSet<Badge>(0);

	@Column(name="avatar")
	public String getAvatar() {
		return avatar;
	}

	public void setAvatar(String avatar) {
		this.avatar = avatar;
	}

	@Column(name="login_count")
	public Long getLogin_count() {
		return login_count;
	}

	public void setLogin_count(Long login_count) {
		this.login_count = login_count;
	}

	@Column(name="create_time")
	public Date getCreate_time() {
		return create_time;
	}

	public void setCreate_time(Date create_time) {
		this.create_time = create_time;
	}

	@Column(name="out_date")
	public Date getOutDate() {
		return outDate;
	}

	public void setOutDate(Date outDate) {
		this.outDate = outDate;
	}

	@Column(name="validata_code")
	public String getValidataCode() {
		return validataCode;
	}

	public void setValidataCode(String validataCode) {
		this.validataCode = validataCode;
	}

	@Column(name="experience")
	public Long getExperience() {
		return experience;
	}

	//检测经验
	public void setExperience(Long experience) {
		if(experience<0){
			this.experience = 0L;
		}else if(experience>9999){
			this.experience = 9999L;
		}else{
			this.experience = experience;
		}
		
	}

	@Column(name="user_level")
	public int getUser_level() {
		return user_level;
	}

	//检测等级
	public void setUser_level(int user_level) {
		this.user_level = user_level;
		
		if(user_level<1){
			this.user_level = 1;
		}else if(user_level>9){
			this.user_level = 9;
		}else{
			this.user_level = user_level;
		}
	}

	private List<AcctRole> roleList = Lists.newArrayList();//有序的关联对象集合
	

	public AcctUser() {
	}
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(unique = true,nullable = false)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	//字段非空且唯一, 用于提醒Entity使用者及生成DDL.
	@Column(name="login_name",nullable = false, unique = true)
	public String getLoginName() {
		return this.loginName;
	}

	public void setLoginName(String loginName) {
		this.loginName = loginName;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
	
	@OneToMany(mappedBy = "acctuser")
	public Set<Comment> getComments() {
		return comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}
	
	//---
	@OneToMany(mappedBy="acctUser",cascade = { CascadeType.PERSIST ,CascadeType.ALL})
	public Set<AcctUserInfo> getAcctUserInfo() {
		return acctUserInfo;
	}

	public void setAcctUserInfo(Set<AcctUserInfo> acctUserInfo) {
		this.acctUserInfo = acctUserInfo;
	}

	@ManyToMany
	@JoinTable(name = "user_badge", joinColumns = { @JoinColumn(name = "user_id") }, inverseJoinColumns = { @JoinColumn(name = "badge_id") })
	@Fetch(FetchMode.SUBSELECT)
	@OrderBy("id")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public Set<Badge> getBadges() {
		return badges;
	}

	public void setBadges(Set<Badge> badges) {
		this.badges = badges;
	}

		//多对多定义
		@ManyToMany
		//中间表定义,表名采用默认命名规则
		@JoinTable(name = "ACCT_USER_ROLE", joinColumns = { @JoinColumn(name = "USER_ID") }, inverseJoinColumns = { @JoinColumn(name = "ROLE_ID") })
		//Fecth策略定义
		@Fetch(FetchMode.SUBSELECT)
		//集合按id排序.
		@OrderBy("id")
		//集合中对象id的缓存.
		@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
		public List<AcctRole> getRoleList() {
			return roleList;
		}

		public void setRoleList(List<AcctRole> roleList) {
			this.roleList = roleList;
		}

		//非持久化属性.
		@Transient
		public String getRoleNames() {
			return ConvertUtils.convertElementPropertyToString(roleList, "name", ", ");
		}
		
		/**
		 * 用户拥有的角色id字符串, 多个角色id用','分隔.
		 */
		//非持久化属性.
		@Transient
		@SuppressWarnings("unchecked")
		public List<Long> getRoleIds() {
			return ConvertUtils.convertElementPropertyToList(roleList, "id");
		}

		@Override
		public String toString() {
			return ToStringBuilder.reflectionToString(this);
		}
		
		//非持久化属性.
		@Transient
		public String createTimeToString(){
			return create_time.toLocaleString();
		}
	
}
